{{- if and .Values.grpcMetadata.enabled .Values.zenml.database.url }}

{{- $certSubjectName := .Values.grpcMetadata.ingress.host | default .Values.grpcMetadata.externalHostname -}}


{{- if or .Values.grpcMetadata.tls.enabled .Values.grpcMetadata.tls.generateCerts }}

{{- $prevServerSecret := (lookup "v1" "Secret" .Release.Namespace .Values.grpcMetadata.tls.secretName) -}}
{{- $prevClientSecret := (lookup "v1" "Secret" .Release.Namespace .Values.grpcMetadata.tls.clientSecretName) -}}
{{- if or .Release.IsInstall (not $prevServerSecret) (not $prevClientSecret) }}
{{- $_ := set . "regenerateCerts" true -}}
{{- else if eq (index $prevServerSecret.metadata.annotations "zenml.certs/subject-name") $certSubjectName }}
{{- $_ := set . "regenerateCerts" false -}}
{{- else }}
{{- $_ := set . "regenerateCerts" true -}}
{{- end }}


{{- if .regenerateCerts }}

{{- $caCert := genCA "zenml-ca" 365 -}}
{{- $serverCert := genSignedCert $certSubjectName nil (list $certSubjectName) 365 $caCert -}}
{{- $clientCert := genSignedCert "" nil nil 365 $caCert }}

{{- $_ := set . "caCert" $caCert.Cert -}}
{{- $_ := set . "serverCert" $serverCert.Cert -}}
{{- $_ := set . "serverKey" $serverCert.Key -}}
{{- $_ := set . "clientCert" $clientCert.Cert }}
{{- $_ := set . "clientKey" $clientCert.Key }}

{{- else }}

{{- $_ := set . "caCert" (index $prevServerSecret.data "ca.crt" | b64dec) -}}
{{- $_ := set . "serverCert" (index $prevServerSecret.data "tls.crt" | b64dec) -}}
{{- $_ := set . "serverKey" (index $prevServerSecret.data "tls.key" | b64dec) -}}
{{- $_ := set . "clientCert" (index $prevClientSecret.data "tls.crt" | b64dec) }}
{{- $_ := set . "clientKey" (index $prevClientSecret.data "tls.key" | b64dec) }}

{{- end }}


---

apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.grpcMetadata.tls.secretName }}
  annotations:
    zenml.certs/subject-name: {{ $certSubjectName }}
  labels:
    {{- include "zenml.labels" . | nindent 4 }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .serverCert | b64enc | quote }}
  tls.key: {{ .serverKey  | b64enc | quote }}
  ca.crt: {{ .caCert | b64enc | quote }}

---

apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.grpcMetadata.tls.clientSecretName }}
  labels:
    {{- include "zenml.labels" . | nindent 4 }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .clientCert | b64enc | quote }}
  tls.key: {{ .clientKey | b64enc | quote }}
  ca.crt: {{ .caCert | b64enc | quote }}

{{- end }}

---

{{- $partsOne := split "/" .Values.zenml.database.url }}
{{- $database := $partsOne._3 }}
{{- $partsTwo := split "@" $partsOne._2 }}
{{- $partsThree := split ":" $partsTwo._0 }}
{{- $user := $partsThree._0 }}
{{- $password := $partsThree._1 }}
{{- $partsFour := split ":" $partsTwo._1 }}
{{- $host := $partsFour._0 }}
{{- $port := $partsFour._1 }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "zenml.fullname" . }}-grpc-metadata
  labels:
    {{- include "zenml.metadataLabels" . | nindent 4 }}
stringData:
  metadata-store-config.pb: |
    connection_config {
      mysql {
        host: '{{ $host }}'
        port: {{ $port | default 3306 }}
        database: '{{ $database }}'
        user: '{{ $user }}'
        password: '{{ $password }}'
        ssl_options {
          {{- if .Values.zenml.database.sslCa }}
          ca: '/certs/server-ca.pem'
          {{- end }}
          {{- if .Values.zenml.database.sslCert }}
          cert: '/certs/client-cert.pem'
          {{- end }}
          {{- if .Values.zenml.database.sslKey }}
          key: '/certs/client-key.pem'
          {{- end }}
          {{- if .Values.zenml.database.sslVerifyServerCert }}
          verify_server_cert: true
          {{- else }}
          verify_server_cert: false
          {{- end }}
        }
        skip_db_creation: false
      }
    }
{{- if and .Values.grpcMetadata.tls.enabled (not .Values.grpcMetadata.ingress.enabled) }}
    ssl_config {
      server_key: {{ .serverKey | quote}}
      server_cert: {{ .serverCert | quote }}
      custom_ca: {{ .caCert | quote }}
      client_verify: true
    }
{{- end }}
    migration_options {
      enable_upgrade_migration: true
    }
{{- end }}
