name: Integration Tests

on:
  workflow_call:
    inputs:
      os:
        description: 'OS'
        type: string
        required: true
      python-version:
        description: 'Python version'
        type: string
        required: true
      test_environment:
        description: 'The test environment'
        type: string
        required: true
      enable_tmate:
        description: 'Enable tmate session for debugging'
        type: string
        required: false
        default: "never"
      tmate_timeout:
        description: 'Timeout for tmate session (minutes)'
        type: number
        required: false
        default: 30

  workflow_dispatch:
    inputs:
      os:
        description: 'OS'
        type: choice
        options: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        required: false
        default: 'ubuntu-latest'
      python-version:
        description: 'Python version'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
        required: false
        default: '3.8'
      test_environment:
        description: 'The test environment'
        type: choice
        options:
          # Default ZenML deployments
          - default
          - default-docker-orchestrator
          - default-airflow-orchestrator
          # Local ZenML server deployments
          - local-server
          - local-server-docker-orchestrator
          - local-server-airflow-orchestrator
          # Local ZenML docker-compose server deployments
          - docker-server
          - docker-server-docker-orchestrator
          - docker-server-airflow-orchestrator
          # AWS ZenML server deployment with local components
          - aws-local-orchestrator
          - aws-docker-orchestrator
          - aws-kubeflow-orchestrator
          - aws-airflow-orchestrator
          # AWS ZenML server deployment with AWS cloud components
          - aws-cloud-local-orchestrator
          - aws-cloud-docker-orchestrator
          - aws-cloud-kubeflow-orchestrator
          - aws-cloud-kubernetes-orchestrator
          - aws-cloud-tekton-orchestrator
          - aws-cloud-sagemaker-orchestrator
          # GCP ZenML server deployment with local components
          - gcp-local-orchestrator
          - gcp-docker-orchestrator
          - gcp-kubeflow-orchestrator
          - gcp-airflow-orchestrator
          # GCP ZenML server deployment with GCP cloud components
          - gcp-cloud-local-orchestrator
          - gcp-cloud-docker-orchestrator
          - gcp-cloud-kubeflow-orchestrator
          - gcp-cloud-kubernetes-orchestrator
          - gcp-cloud-tekton-orchestrator
          - gcp-cloud-vertex-ai-orchestrator
        required: false
        default: 'default'
      enable_tmate:
        description: 'Enable tmate session for debugging'
        type: choice
        options:
          - 'no'
          - 'on-failure'
          - 'always'
          - 'before-tests'
        required: false
        default: 'no'
      tmate_timeout:
        description: 'Timeout for tmate session (minutes)'
        type: number
        required: false
        default: 30

jobs:

  integration-and-template-tests:
    name: integration-and-template-tests
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
    env:
      ZENML_DEBUG: 1
      ZENML_ANALYTICS_OPT_IN: false
      PYTHONIOENCODING: 'utf-8'
      # on MAC OS, we need to set this environment variable
      # to fix problems with the fork() calls (see this thread
      # for more information: http://sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html)
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES'

      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_US_EAST_1_ENV_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_US_EAST_1_ENV_SECRET_ACCESS_KEY }}
      AWS_US_EAST_1_SERVER_URL: ${{ secrets.AWS_US_EAST_1_SERVER_URL }}
      AWS_US_EAST_1_SERVER_USERNAME: ${{ secrets.AWS_US_EAST_1_SERVER_USERNAME }}
      AWS_US_EAST_1_SERVER_PASSWORD: ${{ secrets.AWS_US_EAST_1_SERVER_PASSWORD }}
      GCP_US_EAST4_SERVER_URL: ${{ secrets.GCP_US_EAST4_SERVER_URL }}
      GCP_US_EAST4_SERVER_USERNAME: ${{ secrets.GCP_US_EAST4_SERVER_USERNAME }}
      GCP_US_EAST4_SERVER_PASSWORD: ${{ secrets.GCP_US_EAST4_SERVER_PASSWORD }}
    if: ${{ ! startsWith(github.event.head_commit.message, 'GitBook:') }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Maximize space for Docker
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 20000
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          build-mount-path: /var/lib/docker
        if: runner.os=='Linux' && (contains(inputs.test_environment, 'docker') || contains(inputs.test_environment, 'kubeflow') || contains(inputs.test_environment, 'airflow') || contains(inputs.test_environment, 'kubernetes'))

      - name: Reload Docker
        run:
          sudo systemctl restart docker
        if: runner.os=='Linux' && (contains(inputs.test_environment, 'docker') || contains(inputs.test_environment, 'kubeflow') || contains(inputs.test_environment, 'airflow') || contains(inputs.test_environment, 'kubernetes'))

      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_US_EAST_1_ENV_ROLE_ARN }}
          aws-region: us-east-1
        if: contains(inputs.test_environment, 'aws')

      - name: Configure GCP credentials
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_US_EAST4_ENV_CREDENTIALS }}'
        if: contains(inputs.test_environment, 'gcp')

      - name: 'Set up gcloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          install_components: 'gke-gcloud-auth-plugin'
        if: contains(inputs.test_environment, 'gcp')

      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}
          python-version: ${{ inputs.python-version }}
          os: ${{ inputs.os }}

      - name: Install docker-compose for non-default environments
        if: inputs.test_environment != 'default'
        run: pip install docker-compose

      - name: Install Linux System Dependencies
        if: runner.os=='Linux'
        run: sudo apt install graphviz

      - name: Install MacOS System Dependencies
        if: runner.os=='macOS'
        run: brew install graphviz

      - name: Install Windows System Dependencies
        if: runner.os=='Windows'
        run: choco install graphviz

      - name: Install Docker and Colima on MacOS
        if: runner.os=='macOS'
        run: |
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          brew update
          brew install docker colima
          brew reinstall --force qemu

          # We need to mount the /private/tmp/zenml-test/ folder because
          # this folder is also mounted in the Docker containers that are
          # started by local ZenML orchestrators.
          colima start --mount /private/tmp/zenml-test/:w

          # This is required for the Docker Python SDK to work
          sudo ln -sf $HOME/.colima/default/docker.sock /var/run/docker.sock

      - name: Install kubectl on Linux
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g 0 -m 0755 kubectl /usr/local/bin/kubectl
        if: runner.os=='Linux'

      - name: Install kubectl on MacOS
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
          sudo install -o root -g 0 -m 0755 kubectl /usr/local/bin/kubectl
        if: runner.os=='macOS'

      - name: Install K3D
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
        if: runner.os!='Windows' && contains(inputs.test_environment, 'kubeflow')

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 715803424590.dkr.ecr.us-east-1.amazonaws.com
        if: contains(inputs.test_environment, 'aws')

      - name: Login to Amazon EKS
        id: login-eks
        run: |
          aws eks --region us-east-1 update-kubeconfig --name zenml-ci-cluster --alias zenml-ci-aws-us-east-1
        if: contains(inputs.test_environment, 'aws')

      - name: Login to Google ECR
        run: |
          gcloud auth configure-docker --project zenml-ci
        if: contains(inputs.test_environment, 'gcp')

      - name: Login to Google GKE
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: zenml-ci-cluster
          location: us-east4
          project_id: zenml-ci
        if: contains(inputs.test_environment, 'gcp')

      - name: Setup tmate session before tests
        if: ${{ inputs.enable_tmate == 'before-tests' }}
        uses: mxschmitt/action-tmate@v3
        with:
          timeout-minutes: ${{ inputs.tmate_timeout }}

      - name: Test
        run: |
          bash scripts/test-coverage-xml.sh integration ${{ inputs.test_environment }}

      - name: Setup tmate session after tests
        if: ${{ inputs.enable_tmate == 'always' || (inputs.enable_tmate == 'on-failure' && failure()) }}
        uses: mxschmitt/action-tmate@v3
        with:
          timeout-minutes: ${{ inputs.tmate_timeout }}

      - name: Verify Python Env unaffected
        run: |
          zenml integration list
          pip list
          pip check || true
