name: Setup Python Environment, Lint and Unit Test

on:
  workflow_call:
    inputs:
      os:
        description: 'OS'
        type: string
        required: true
      python-version:
        description: 'Python version'
        type: string
        required: true
      enable_tmate:
        description: 'Enable tmate session for debugging'
        type: string
        required: false
        default: "never"
      install_integrations:
        description: 'Install ZenML integrations'
        type: string
        required: false
        default: 'yes'

  workflow_dispatch:
    inputs:
      os:
        description: 'OS'
        type: choice
        options: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        required: false
        default: 'ubuntu-latest'
      python-version:
        description: 'Python version'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
        required: false
        default: '3.8'
      enable_tmate:
        description: 'Enable tmate session for debugging'
        type: choice
        options:
          - 'no'
          - 'on-failure'
          - 'always'
          - 'before-tests'
        required: false
        default: 'no'

jobs:
  setup-and-test:
    name: setup-and-test
    runs-on: ${{ inputs.os }}
    env:
      ZENML_DEBUG: 1
      ZENML_ANALYTICS_OPT_IN: false
      PYTHONIOENCODING: 'utf-8'
      # on MAC OS, we need to set this environment variable
      # to fix problems with the fork() calls (see this thread
      # for more information: http://sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html)
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: "YES"
    # Exit if it's a commit from Gitbook
    if: ${{ ! startsWith(github.event.head_commit.message, 'GitBook:') }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: ${{ inputs.os == 'ubuntu-latest' }}
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: clean unnecessary files to save space
        if: ${{ inputs.os == 'ubuntu-latest' }}
        run: |
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
            sudo apt -y autoremove --purge
            sudo apt -y autoclean
            sudo apt clean
            rm --recursive --force "$AGENT_TOOLSDIRECTORY"
            df -h

      - name: Reinstall packages needed for unit tests
        if: ${{ inputs.os == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install ffmpeg libsm6 libxext6 -y

      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}
          python-version: ${{ inputs.python-version }}
          os: ${{ inputs.os }}
          install_integrations: ${{ inputs.install_integrations }}

      - name: Setup tmate session before tests
        if: ${{ inputs.enable_tmate == 'before-tests' }}
        uses: mxschmitt/action-tmate@v3

      - name: Lint check
        run: |
          bash scripts/lint.sh

      - name: Spelling checker
        uses: crate-ci/typos@master
        with:
          files: "."
          config: ./.typos.toml
        # Only run the spell check on ubuntu-latest and python 3.8
        if: ${{ inputs.os == 'ubuntu-latest' && inputs.python-version == '3.8' }}

      - name: Docstring check
        run: bash scripts/docstring.sh
        # Only run the docstring check on ubuntu-latest and python 3.8
        if: ${{ inputs.os == 'ubuntu-latest' && inputs.python-version == '3.8' }}

      - name: Security check
        run: bash scripts/check-security.sh

      - name: Markdown link check
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'no'
          folder-path: './examples, ./docs/book, ./src'
          file-path: './README.md, ./LICENSE, ./RELEASE_NOTES.md, CODE-OF-CONDUCT.md, CONTRIBUTING.md, CLA.md, RELEASE_NOTES.md, ROADMAP.md'
          config-file: .github/workflows/markdown_check_config.json
        continue-on-error: true
        # Only run the markdown link check on ubuntu-latest and python 3.8
        if: ${{ inputs.os == 'ubuntu-latest' && inputs.python-version == '3.8' }}

      - name: Check for alembic branch divergence
        run: |
          bash scripts/check-alembic-branches.sh

      - name: Run unit tests
        run: |
          bash scripts/test-coverage-xml.sh unit

      # - name: Upload coverage
      #   # only do it for python 3.8, we don't need to do it for every version
      #   if: ${{ inputs.os == 'ubuntu-latest' && inputs.python-version == '3.8' }}
      #   uses: codecov/codecov-action@v2

      - name: Setup tmate session after tests
        if: ${{ inputs.enable_tmate == 'always' || (inputs.enable_tmate == 'on-failure' && failure()) }}
        uses: mxschmitt/action-tmate@v3

      - name: Verify Python Env unaffected
        run: |
          zenml integration list
          pip list
          pip check || true
